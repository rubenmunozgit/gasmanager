<!DOCTYPE html>
<html>
  <head>
    <title>New Sails App</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap-toggle.min.css">
    <link rel="stylesheet" href="/styles/bootstrap.css">
    <link rel="stylesheet" href="/styles/bootstrapValidator.css">
    <link rel="stylesheet" href="/styles/custom.css">
    <link rel="stylesheet" href="/styles/font-awesome.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/morris.css">
    <!--STYLES END-->

<script type="text/javascript">
window.overlord = { csrf: '<%= _csrf %>'};
</script>

  </head>

  <body>

    <nav class="navbar navbar-inverse navbar-fixed-top" role="navigation">
       <div class="container">
          <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="/"><span class="fa fa-leaf"></span> GasManager</a>
          </div>
          <!-- Collection of nav links, forms, and other content for toggling -->
          <div id="navbarCollapse" class="collapse navbar-collapse">
            <ul class="nav navbar-nav">
            <% if (session.authenticated) { %>
              <li class="active"><a href="/session/destroy"><span class="fa fa-user"></span> Log out</a></li>
              <li class="active"><a href="/dashboard/showdb/<%= req.session.User.id %>"><span class="fa fa-tachometer"></span> DashBoard</a></li>
            <ul class="nav navbar-nav navbar-right">
              <li class="active"><a class="menuLink" href="#settings"><span class="fa fa-cog"></span> Settings</a>
              </li>
            </ul>
            <% } %>
            <% if (!session.authenticated) { %>
              <li class="dropdown" id="menuLogin">
                <a class="dropdown-toggle" data-toggle="dropdown" id="navLogin"><span class="fa fa-user"></span> Login</a>
                <div class="dropdown-menu col-lg-12 col-xs-12 col-sm-6 col-md-6" style="padding: 5px 30px;min-width: 350px;">
                  <form id="LogInForm" class="form-horizontal" action="/session/create" method="POST">
                    <div class="form-group" >
                      <div class="input-group">
                        <span class="input-group-addon">
                          <i class="fa fa-at"></i></span>
                        <input name="email" id="email" type="email" placeholder="Email" class="form-control" title="Enter your email" required="">
                      </div>
                    </div>
                    <div class="form-group">
                      <div class="input-group">
                        <span class="input-group-addon">
                          <i class="fa fa-key"></i></span>
                        <input name="password" id="password" type="password" placeholder="Password" class="form-control" title="Enter your password" required="">
                      </div>
                    </div>
                    <div class="form-group">
                      <button type="submit" id="btnLogin" class="btn btn-success">Login</button>
                      <input type="hidden" name="_csrf" value="<%= _csrf %>"/>
                    </div>
                  </form>
                    <a data-toggle="modal" role="button" href="#forgotPasswordModal">Forgot username or password?</a>
                </div>
              </li>

            <% } %>
            

            </ul>

          </div>
       </div>
    </nav>
    

    
    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/jquery-1.11.1.js"></script>
    <script src="/js/dependencies/LoginValidation.js"></script>
    <script src="/js/dependencies/SignUpValidation.js"></script>
    <script src="/js/dependencies/bcrypt.js"></script>
    <script src="/js/dependencies/bootstrap-toggle.min.js"></script>
    <script src="/js/dependencies/bootstrap.js"></script>
    <script src="/js/dependencies/bootstrapValidator.js"></script>
    <script src="/js/dependencies/dshboardCharts.js"></script>
    <script src="/js/dependencies/morris.min.js"></script>
    <script src="/js/dependencies/raphael-2.1.2-min.js"></script>
    <!--SCRIPTS END-->

  </body>
</html>
